stages:
  - test
  - pack
  - deploy

variables:
  INSTALL_PACKAGES: git gcc make cmake unzip python36-pip
  BUNDLE_VERSION: 1.10.3-68-g618f48d
  PACKAGE_TARGETS: |
    OS=el DIST=6
    OS=el DIST=7
    OS=fedora DIST=29
    OS=fedora DIST=30
    OS=ubuntu DIST=trusty
    OS=ubuntu DIST=xenial
    OS=ubuntu DIST=bionic
    OS=debian DIST=jessie
    OS=debian DIST=stretch
  PACKAGECLOUD_REPOS: |
    1_10
    2x
    2_2

.job: &job
  image: centos:7
  tags:
    - docker
    - mcs

.test_template: &test_template
  <<: *job
  stage: test
  script:
    - make lint test

test_enterprise-1.10:
  <<: *test_template
  cache:
    key: $BUNDLE_VERSION
    paths:
      - tmp/sdk-1.10
  before_script:
    - yum -y install $INSTALL_PACKAGES
    - make tmp/sdk-1.10
    - source tmp/sdk-1.10/env.sh
    - tarantool -V
    - make ci_prepare

.test_opensource: &test_opensource
  <<: *test_template
  before_script:
    - curl -s https://packagecloud.io/install/repositories/tarantool/$TARANTOOL_VERSION/script.rpm.sh | bash
    - yum -y install tarantool tarantool-devel $INSTALL_PACKAGES
    - tarantool -V
    - make ci_prepare

test_opensource-1.10:
  <<: *test_opensource
  variables:
    TARANTOOL_VERSION: '1_10'

test_opensource-2.2:
  <<: *test_opensource
  variables:
    TARANTOOL_VERSION: '2_2'

.e2e-opensource-1.10:
  stage: test
  tags:
    - shell
    - vagrant
  before_script:
    - vagrant up
  script:
    - vagrant ssh centos < test/e2e/start-rpm.sh
    - vagrant ssh centos < test/e2e/test-cluster.sh
    - vagrant reload centos
    - sleep 1
    - vagrant ssh centos < test/e2e/test-cluster.sh
    - vagrant ssh centos < test/e2e/cleanup.sh

    - vagrant ssh ubuntu < test/e2e/start-deb.sh
    - vagrant ssh ubuntu < test/e2e/test-cluster.sh
    - vagrant reload ubuntu
    - sleep 1
    - vagrant ssh ubuntu < test/e2e/test-cluster.sh
    - vagrant ssh ubuntu < test/e2e/cleanup.sh
  after_script:
    - vagrant halt
    - vagrant destroy

pack:
  <<: *job
  stage: pack
  when: manual
  tags:
    - molecule-dind
  image: docker:git
  services:
    - name: docker:dind
      alias: localhost
  variables:
    PRODUCT: cartridge-cli
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ''
  before_script:
    - git describe --long
    - git clone https://github.com/packpack/packpack.git packpack
  script:
    - (set -ex;
      echo "$PACKAGE_TARGETS" | while read -r vars; do (
        [ -z "$vars" ] && exit;
        export $vars;
        BUILDDIR=`pwd`/build/$OS/$DIST packpack/packpack;
      ) done)
    - ls -l build/**/*
  artifacts:
    expire_in: 12h
    paths:
      - build/

deploy:
  <<: *job
  stage: deploy
  when: manual
  image:
    name: digitalocean/packagecloud
    entrypoint: ['']
  script:
    - (set -ex;
      echo "$PACKAGE_TARGETS" | while read -r vars; do (
        [ -z "$vars" ] && exit;
        export $vars;
        for ext in deb rpm; do (
          [ -z "$(ls build/$OS/$DIST/*.$ext 2> /dev/null)" ] && exit;
          echo "$PACKAGECLOUD_REPOS" | while read -r repo; do (
            [ -z "$repo" ] && exit;
            package_cloud push $PACKAGECLOUD_USER/$repo/$OS/$DIST build/$OS/$DIST/*.$ext;
          ) done;
        ) done;
      ) done)
