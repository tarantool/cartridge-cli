stages:
  - prebuild
  - test
  - publish
  - pack
  - deploy

image: centos:8

variables:
  BUNDLE_VERSION: 1.10.3-68-g618f48d
  PACKAGE_TARGETS: |
    OS=el DIST=6
    OS=el DIST=7
    OS=el DIST=8
    OS=fedora DIST=29
    OS=fedora DIST=30
    OS=ubuntu DIST=trusty
    OS=ubuntu DIST=xenial
    OS=ubuntu DIST=bionic
    OS=debian DIST=jessie
    OS=debian DIST=stretch
    OS=debian DIST=buster
  PACKAGECLOUD_REPOS: |
    1_10
    2x
    2_2

.dind:
  tags:
    - molecule-dind
  services:
    - name: docker:dind
      alias: localhost
  image: docker
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ''
    DOCKER_HOST: tcp://docker:2375/

prebuild:
  extends: .dind
  stage: prebuild
  only:
    changes:
      - Dockerfile
      - wrapdocker
      - .gitlab-ci.yml
  before_script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.gitlab.com
  script:
    - docker pull $CI_REGISTRY_IMAGE || true

    - docker build
      --cache-from $CI_REGISTRY_IMAGE
      --tag $CI_REGISTRY_IMAGE
      .
    - docker push $CI_REGISTRY_IMAGE
  after_script:
    - docker logout registry.gitlab.com

include:
  remote: https://tarantool.github.io/rocks.tarantool.org/helpers/gitlab-publish-rockspec.yml

.test_template:
  stage: test
  extends: .dind
  image: $CI_REGISTRY_IMAGE
  variables:
    TARANTOOL_DOCKER_BUILD_ARGS: --cache-from cache-image
  script:
    - make lint test

test_enterprise-1.10:
  extends: .test_template
  cache:
    key: $BUNDLE_VERSION
    paths:
      - tmp/sdk-1.10
      - tmp/cache-image.tar
  variables:
    TARANTOOL_DOWNLOAD_TOKEN: $DOWNLOAD_TOKEN
    CACHE_IMAGE_TARGET: cache-base
  before_script:
    - docker info
    - make tmp/sdk-1.10
    - source tmp/sdk-1.10/env.sh
    - tarantool -V
    - make ci_prepare
    - make tmp/cache-image.tar
    - docker load -i tmp/cache-image.tar

.test_opensource:
  extends: .test_template
  cache:
    key: ${TARANTOOL_VERSION}
    paths:
      - tmp/cache-image.tar
  before_script:
    - docker info
    - curl -s https://packagecloud.io/install/repositories/tarantool/$TARANTOOL_VERSION/script.rpm.sh | bash
    - yum -y install tarantool tarantool-devel
    - tarantool -V
    - make ci_prepare
    - make tmp/cache-image.tar
    - docker load -i tmp/cache-image.tar

test_opensource-1.10:
  extends: .test_opensource
  variables:
    TARANTOOL_VERSION: '1_10'
    CACHE_IMAGE_TARGET: cache-opensource-1.10

test_opensource-2.2:
  extends: .test_opensource
  variables:
    TARANTOOL_VERSION: '2_2'
    CACHE_IMAGE_TARGET: cache-opensource-2.2

.e2e-opensource-1.10:
  stage: test
  tags:
    - shell
    - vagrant
  before_script:
    - vagrant up
  script:
    - vagrant ssh centos < test/e2e/start-rpm.sh
    - vagrant ssh centos < test/e2e/test-cluster.sh
    - vagrant reload centos
    - sleep 1
    - vagrant ssh centos < test/e2e/test-cluster.sh
    - vagrant ssh centos < test/e2e/cleanup.sh

    - vagrant ssh ubuntu < test/e2e/start-deb.sh
    - vagrant ssh ubuntu < test/e2e/test-cluster.sh
    - vagrant reload ubuntu
    - sleep 1
    - vagrant ssh ubuntu < test/e2e/test-cluster.sh
    - vagrant ssh ubuntu < test/e2e/cleanup.sh
  after_script:
    - vagrant halt
    - vagrant destroy

pack:
  stage: pack
  when: manual
  extends: .dind
  image: docker:git
  variables:
    PRODUCT: cartridge-cli
  before_script:
    - git describe --long
    - git clone https://github.com/packpack/packpack.git packpack
  script:
    - (set -ex;
      echo "$PACKAGE_TARGETS" | while read -r vars; do (
        [ -z "$vars" ] && exit;
        export $vars;
        BUILDDIR=`pwd`/build/$OS/$DIST packpack/packpack;
      ) done)
    - ls -l build/**/*
  artifacts:
    expire_in: 12h
    paths:
      - build/

deploy:
  stage: deploy
  when: manual
  tags:
    - docker
  image:
    name: digitalocean/packagecloud
    entrypoint: ['']
  script:
    - (set -ex;
      echo "$PACKAGE_TARGETS" | while read -r vars; do (
        [ -z "$vars" ] && exit;
        export $vars;
        for ext in deb rpm; do (
          [ -z "$(ls build/$OS/$DIST/*.$ext 2> /dev/null)" ] && exit;
          echo "$PACKAGECLOUD_REPOS" | while read -r repo; do (
            [ -z "$repo" ] && exit;
            package_cloud push $PACKAGECLOUD_USER/$repo/$OS/$DIST build/$OS/$DIST/*.$ext;
          ) done;
        ) done;
      ) done)
