
msgid "TGZ"
msgstr ""

msgid "RPM/DEB"
msgstr ""

msgid "Docker"
msgstr ""

msgid "Building in Docker"
msgstr ""

msgid "Packaging the application"
msgstr ""

msgid "To package your application, use the ``pack`` command:"
msgstr ""

msgid "where:"
msgstr ""

msgid "``TYPE`` (required) is the distribution type. Supported types:"
msgstr ""

msgid ""
"``PATH`` (optional) is the path to the application directory. Defaults to "
"``.`` (the current directory)."
msgstr ""

msgid ""
"Before packaging, ``cartridge pack`` builds the application. This process is"
" similar to what ``cartridge build`` :doc:`does <build>`. The resulting "
"artifact includes ``.rocks`` modules and executables that are specific for "
"the system where you've packaged the application. For this reason, a "
"distribution built on one OS can't be used on another---for example, an RPM "
"built on MacOS can't be installed on a CentOS machine. However, you can work"
" around this by enforcing package build in Docker via the ``--use-docker`` "
"flag."
msgstr ""

msgid ""
"If you use open-source Tarantool, your artifact will have `tarantool` as a "
"dependency. Its version will be the same as in your system's ``PATH``. If "
"you use Tarantool Enterprise, your artifact will contain the ``tarantool`` "
"and ``tarantoolctl`` binaries from your current SDK."
msgstr ""

msgid "Flags"
msgstr ""

msgid ""
"The following flags control the local packaging of any distribution type, be"
" it RPM, DEB, TGZ, or a Docker image."
msgstr ""

msgid "``--name``"
msgstr ""

msgid ""
"Application name. The package and the systemd service will have the same "
"name. The default name comes from the ``package`` field in the ``.rockspec``"
" file."
msgstr ""

msgid "``--version``"
msgstr ""

msgid ""
"Application package version. Expected pattern: "
"``major.minor.patch[-count][-commit]``. Input like ``major.minor.patch`` "
"will be normalized to ``major.minor.patch-count``. By default, the version "
"string is the output of ``git describe --tags --long``. If the application "
"is not a git repository, you have to set the ``--version`` flag explicitly."
msgstr ""

msgid "``--suffix``"
msgstr ""

msgid ""
"The suffix of the resulting file or image name. For example, a ``tar.gz`` "
"distribution is named according to the pattern: "
"``<name>-<version>[-<suffix>].tar.gz``."
msgstr ""

msgid "``--use-docker``"
msgstr ""

msgid ""
"Force Cartridge to build the application in Docker. Enforced if you're "
"building a Docker image."
msgstr ""

msgid "``--no-cache``"
msgstr ""

msgid ""
"Disable :ref:`path caching <cartridge-cli-path_caching>`. When used with "
"``cartridge pack docker``, also enforces the ``--no-cache`` ``docker`` flag."
msgstr ""

msgid ""
"To learn about distribution-specific flags, check the documentation for "
"creating Cartridge :doc:`RPM/DEB distributables <pack/rpm-deb>` and "
":doc:`Docker images <pack/docker>`."
msgstr ""

msgid "Details"
msgstr ""

msgid "Building the package"
msgstr ""

msgid ""
"By default, the package is built inside a temporary directory in "
"``~/.cartridge/tmp/``. In this way, the packaging process doesn't affect the"
" contents of your application directory."
msgstr ""

msgid ""
"When Cartridge copies your application files, it ignores the ``.rocks`` "
"directory."
msgstr ""

msgid ""
"All file permissions are preserved in the resulting package, and the code "
"files owner is set to ``root:root``."
msgstr ""

msgid ""
"Make sure all your application files have at least ``a+r`` permissions "
"(``a+rx`` for directories). Otherwise, ``cartridge pack`` will raise an "
"error."
msgstr ""

msgid "Customizing your build directory"
msgstr ""

msgid ""
"You can specify a custom build directory for your application using the "
"``CARTRIDGE_TEMPDIR`` environment variable. If this directory doesn't exist,"
" it will be created, used for packaging the application, and then removed."
msgstr ""

msgid ""
"If you specify an existing directory in the ``CARTRIDGE_TEMPDIR`` "
"environment variable, the ``CARTRIDGE_TEMPDIR/cartridge.tmp`` directory will"
" be used for packaging the application and then removed. Before the "
"packaging starts, this nested directory will be cleaned up."
msgstr ""

msgid ""
"This is especially useful if you want to use your Docker build with GitLab "
"CI. Docker volumes don't work properly with the default tmp directory in "
"this case. Use ``CARTRIDGE_TEMPDIR=. cartridge pack ...``."
msgstr ""

msgid "How building works"
msgstr ""

msgid ""
"This section concern building Cartridge applications locally. To learn about"
" building them in Docker, check the :doc:`corresponding documentation page "
"<pack/building-in-docker>`."
msgstr ""

msgid ""
"Whether you're building a TGZ archive, an RPM/DEB distributable, or a Docker"
" image, your application is built in three stages."
msgstr ""

msgid "Stage 1: Cleaning up the application directory"
msgstr ""

msgid ""
"At this stage, some files are filtered out of the application directory."
msgstr ""

msgid ""
"First, ``git clean -X -d -f`` removes all untracked and ignored files (it "
"works for submodules, too)."
msgstr ""

msgid "After that, the ``.git`` directory itself is removed."
msgstr ""

msgid "Stage 2. Building the application"
msgstr ""

msgid "At this stage, ``cartridge`` runs the following:"
msgstr ""

msgid ""
"``./cartridge.pre-build``, if it exists in the application root directory. "
"Learn more about :doc:`pre-build and post-build scripts "
"</book/cartridge/cartridge_cli/pre-post-build>`. Instead of using the pre-"
"build script, you can define the build logic by including ``cmake`` commands"
" in your ``.rockspec``, `like we do it in Cartridge "
"<https://github.com/tarantool/cartridge/blob/master/cartridge-"
"scm-1.rockspec#L26>`_."
msgstr ""

msgid ""
"``tarantoolctl rocks make``. This requires a ``.rockspec`` file in the "
"application root directory. If you created your application from template, "
"the file is already there. ``cartridge`` installs all dependencies specified"
" in that file."
msgstr ""

msgid ""
"As a result, the fully built application will appear in the ``.rocks`` "
"directory. You can start it locally from your application directory."
msgstr ""

msgid "Stage 3. Cleaning up the files before packing"
msgstr ""

msgid ""
"At this stage, ``cartridge`` runs ``cartridge.post-build``, if it exists. "
"The post-build script removes junk files (like ``node_modules``) generated "
"during application build."
msgstr ""

msgid ""
"Learn more about :doc:`pre-build and post-build scripts "
"</book/cartridge/cartridge_cli/pre-post-build>`."
msgstr ""

msgid "Versioning"
msgstr ""

msgid ""
"The package generates ``VERSION.lua``, a file that contains the current "
"version of the project. When you connect to an instance with :doc:`cartridge"
" connect <connect>`, you can check the project version by obtaining "
"information from this file:"
msgstr ""

msgid ""
"``VERSION.lua`` is also used when you call :ref:`cartridge.reload_roles() "
"<cartridge.reload_roles>`:"
msgstr ""

msgid ""
"If ``VERSION.lua`` is already in the application directory, it will be "
"overwritten during packaging."
msgstr ""

msgid "Path caching"
msgstr ""

msgid ""
"You can cache paths for packaging Cartridge applications. For example, if "
"you package an application multiple times, the same ``.rocks`` are installed"
" every time over and over. To speed up the repacking process, specify the "
"cached paths in ``pack-cache-config.yml``, a file located in the application"
" root directory."
msgstr ""

msgid ""
"By default, the ``.rocks`` directory is cached. The standard template's "
"``pack-cache-config.yml`` contains the path to that directory:"
msgstr ""

msgid ""
"Make sure you specify the path to ``.rocks`` from the application root "
"directory and provide a cache key. Let's look at the example above:"
msgstr ""

msgid ""
"``<path-to-myapp>/.rocks`` will be cached depending on the content of "
"``myapp-scm-1.rockspec``."
msgstr ""

msgid "``<path-to-myapp>/node_modules`` will always be cached."
msgstr ""

msgid ""
"``<path-to-myapp>/third_party/custom_module`` will be cached depending on "
"``simple-hash-key``."
msgstr ""

msgid ""
"You can't combine these options. For example, you can't specify ``always-"
"cache`` and ``key-path`` at the same time."
msgstr ""

msgid ""
"One project path can only have one caching key. Suppose you cached "
"``.rocks`` with a ``.rockspec`` file as ``key-path``. Then you changed the "
"contents of ``.rockspec`` and ran ``cartridge pack``. In this case, the old "
"cache (associated with the old key) for the project's ``.rocks`` directory "
"path will be deleted. After packing, the new ``.rocks`` cache path will be "
"saved with the new key."
msgstr ""

msgid ""
"There can be no more than **5** projects in the cache that have cached "
"paths. If the 6th project appears, the oldest existing project is removed "
"from the cache directory. However, this is not the case for cached paths "
"within a single project. You can cache as many paths as you like as long as "
"they are in one project."
msgstr ""

msgid ""
"To disable caching, use the ``--no-cache`` flag or remove paths from ``pack-"
"cache-config.yml``. To completely reset the cache, delete the "
"``~/.cartridge/tmp/cache`` directory."
msgstr ""
