
msgid "Packaging an application into RPM or DEB"
msgstr "Упаковка приложения в RPM- или DEB-дистрибутив"

msgid "``cartridge pack rpm|deb`` creates an RPM or DEB package."
msgstr "Команда ``cartridge pack rpm|deb`` создает RPM- или DEB-пакет."

msgid "Flags"
msgstr "Параметры"

msgid ""
"Use the following flags to control the local packaging of an RPM or DEB "
"distribution. For flags that are applicable for packaging any distribution "
"type, check the :doc:`packaging overview "
"</book/cartridge/cartridge_cli/commands/pack>`."
msgstr ""
"Локальной упаковкой дистрибутива RPM или DEB можно управлять с помощью "
"параметров ниже. Параметры, общие для всех типов дистрибутивов, вы найдете "
"на странице с описанием :doc:`команды pack "
"</book/cartridge/cartridge_cli/commands/pack>`."

msgid "``--deps``"
msgstr "``--deps``"

msgid "Defines the dependencies of the package."
msgstr "Зависимости пакета."

msgid "``--deps-file``"
msgstr "``--deps-file``"

msgid ""
"Path to the file that contains package dependencies. Defaults to ``package-"
"deps.txt`` in the application directory."
msgstr ""
"Путь к файлу, содержащему зависимости пакета. По умолчанию это ``package-"
"deps.txt`` в директории приложения."

msgid "``--preinst``"
msgstr "``--preinst``"

msgid "Path to the pre-install script for RPM and DEB packages."
msgstr "Путь к скрипту, выполняемому перед установкой RPM-/DEB-пакета."

msgid "``--postinst``"
msgstr "``--postinst``"

msgid "Path to the post-install script for RPM and DEB packages."
msgstr "Путь к скрипту, выполняемому после установки RPM-/DEB-пакета."

msgid "``--unit-template``"
msgstr "``--unit-template``"

msgid "Path to the template for the ``systemd`` unit file."
msgstr "Путь к шаблону юнит-файла для ``systemd``."

msgid "``--instantiated-unit-template``"
msgstr "``--instantiated-unit-template``"

msgid "Path to the template for the ``systemd`` instantiated unit file."
msgstr ""
"Путь к шаблону юнит-файла для ``systemd``, позволяющего запускать экземпляры"
" приложения (instantiated unit file)."

msgid "``--stateboard-unit-template``"
msgstr "``--stateboard-unit-template``"

msgid "Path to the template for the stateboard ``systemd`` unit file."
msgstr ""
"Путь к шаблону юнит-файла для ``systemd``, позволяющего запустить "
"stateboard-экземпляр приложения."

msgid "``--unit-params-file``"
msgstr "``--unit-params-file``"

msgid ""
"Path to the file that contains unit parameters for ``systemd`` unit files. "
"Defaults to ``systemd-unit-params.yml`` in the application root directory."
msgstr ""
"Путь к файлу, содержащему параметры юнит-файла для ``systemd``. По умолчанию"
" --- ``systemd-unit-params.yml`` в директории приложения."

msgid "Package contents"
msgstr "Содержимое пакета"

msgid ""
"The resulting artifact name is ``<app-"
"name>-<version>[-<suffix>].{rpm,deb}``."
msgstr ""
"Итоговый артефакт получит следующее название: "
"``<имя_приложения>-<версия>[-<суффикс>].{rpm,deb}``."

msgid ""
"The package name is ``<app-name>`` no matter what the artifact name is."
msgstr ""
"Имя пакета аналогично имени приложения и не зависит от имени артефакта."

msgid ""
"If you're using an open-source version of Tarantool, the package has a "
"``tarantool`` dependency (version >= ``<major>.<minor>`` and < "
"``<major+1>``, where ``<major>.<minor>`` is the version of Tarantool used "
"for packaging the application)."
msgstr ""
"Если вы используете для разработки версию Tarantool с открытым исходным "
"кодом, пакет будет содержать зависимость ``tarantool`` с версией >= "
"``<major>.<minor>`` и < ``<major+1>``, где ``<major>.<minor>`` --- версия "
"Tarantool, которую вы использовали для упаковки приложения."

msgid "The package contents are as follows:"
msgstr "В пакет будут помещены следующие файлы:"

msgid ""
"Contents of the application directory. They will be placed at "
"``/usr/share/tarantool/<app-name>``. In case of Tarantool Enterprise, this "
"directory also contains the ``tarantool`` and ``tarantoolctl`` binaries."
msgstr ""
"Содержимое директории приложения. Будет распаковано в "
"``/usr/share/tarantool/<имя_приложения>``. Если вы используете Tarantool "
"Enterprise, директория также будет содержать бинарные файлы ``tarantool`` и "
"``tarantoolctl``."

msgid ""
"Unit files that allow running the application as a ``systemd`` service. They"
" will be unpacked as ``/etc/systemd/system/<app-name>.service`` and "
"``/etc/systemd/system/<app-name>@.service``."
msgstr ""
"Юнит-файлы, позволяющие запускать приложение как сервис ``systemd``. Будут "
"распакованы как ``/etc/systemd/system/<имя_приложения>.service`` и "
"``/etc/systemd/system/<имя_приложения>@.service``."

msgid ""
"Application stateboard unit file. When unpacked, it is placed at "
"``/etc/systemd/system/<app-name>-stateboard.service``. This file will be "
"packed only if the application contains ``stateboard.init.lua`` in its root "
"directory."
msgstr ""
"Юнит-файл stateboard-экземпляра приложения. При распаковке помещается в "
"``/etc/systemd/system/<имя_приложения>-stateboard.service``. Будет упакован,"
" только если в корневом каталоге приложения есть файл "
"``stateboard.init.lua``."

msgid ""
"The file ``/usr/lib/tmpfiles.d/<app-name>.conf``, which allows the instance "
"to restart after server reboot."
msgstr ""
"Файл ``/usr/lib/tmpfiles.d/<имя_приложения>.conf``, благодаря которому "
"экземпляр перезапускается после перезагрузки сервера."

msgid "Upon package installation, the following directories are created:"
msgstr "При установке пакета создаются следующие директории:"

msgid "``/etc/tarantool/conf.d/`` stores instance configuration."
msgstr "``/etc/tarantool/conf.d/``, где хранится конфигурация экземпляров;"

msgid "``/var/lib/tarantool/`` stores instance snapshots."
msgstr "``/var/lib/tarantool/``, где хранятся снимки данных экземпляров;"

msgid "``/var/run/tarantool/`` stores PID files and console sockets."
msgstr ""
"``/var/run/tarantool/``, где хранятся PID-файлы и сокеты консоли (console "
"sockets)."

msgid "Dependencies"
msgstr "Зависимости"

msgid ""
"The ``--deps`` and ``--deps-file`` flags require similar formats of "
"dependency information. However, ``--deps`` does not allow you to specify "
"major and minor versions:"
msgstr ""
"Параметры ``--deps`` и ``--deps-file`` требуют схожих форматов информации о "
"зависимостях. Однако параметр ``--deps`` не позволяет указывать мажорные и "
"минорные версии:"

msgid ""
"# You can't do that:\n"
"cartridge pack rpm --deps dependency_06>=4,<5 appname\n"
"\n"
"# Instead, do this:\n"
"cartridge pack rpm --deps dependency_06>=4,dependency_06<5 appname\n"
"\n"
"# Or this:\n"
"cartridge pack rpm --deps dependency_06>=4 --deps dependency_06<5 appname"
msgstr ""
"# Так сделать не удастся:\n"
"cartridge pack rpm --deps dependency_06>=4,<5 appname\n"
"\n"
"# Вместо этого укажите версии так:\n"
"cartridge pack rpm --deps dependency_06>=4,dependency_06<5 appname\n"
"\n"
"# Или так:\n"
"cartridge pack rpm --deps dependency_06>=4 --deps dependency_06<5 appname"

msgid ""
"``--deps-file`` lets you specify dependencies in a file (``package-"
"deps.txt`` by default). The file is located in the application root "
"directory. If you created your application from template, ``package-"
"deps.txt`` is already there."
msgstr ""
"С помощью параметра ``--deps-file`` можно указать файл, где перечислены "
"зависимости. По умолчанию это файл ``package-deps.txt``, расположенный в "
"корневой директории приложения. Если вы создали приложение по шаблону, файл "
"``package-deps.txt`` уже находится в корневой директории."

msgid "Example dependencies file"
msgstr "Пример файла зависимостей"

msgid ""
"dependency_01 >= 2.5\n"
"dependency_01 <\n"
"dependency_02 >= 1, < 5\n"
"dependency_03==2\n"
"dependency_04<5,>=1.5.3"
msgstr ""
"dependency_01 >= 2.5\n"
"dependency_01 <\n"
"dependency_02 >= 1, < 5\n"
"dependency_03==2\n"
"dependency_04<5,>=1.5.3"

msgid ""
"Each line must describe a single dependency. You can specify both the major "
"and minor versions of the dependency:"
msgstr ""
"Каждая строка должна описывать одну зависимость. Для каждой зависимости "
"можно указать как мажорную, так и минорную версию:"

msgid "dependency_05 >= 4, < 5"
msgstr "dependency_05 >= 4, < 5"

msgid "Pre-install and post-install scripts"
msgstr "Скрипты, выполняемые перед установкой и после нее"

msgid ""
"You can add Bash scripts that will run before and after the installation of "
"your RPM/DEB package. This might be useful, for example, if you want to set "
"up symlinks. Place these files in your application root directory:"
msgstr ""
"Вы можете добавить Bash-скрипты, которые будут запущены до установки вашего "
"RPM/DEB-пакета и после неё соответственно. Это может пригодиться, например, "
"если вы хотите настроить символические ссылки (symlinks). Поместите эти "
"файлы в корневую директорию приложения."

msgid ""
"``preinst.sh`` is the default name of the pre-install script. "
"``postinst.sh`` is the default name of the post-install script."
msgstr ""
"Скрипт, выполняемый перед установкой, по умолчанию носит имя ``preinst.sh``,"
" а скрипт, выполняемый после установки --- ``postinst.sh``."

msgid ""
"To specify other names, use ``cartridge pack`` with the ``--preinst`` and "
"``--postinst`` flags correspondingly."
msgstr ""
"Чтобы указать другие имена скриптов, используйте соответствующие параметры "
"``--preinst`` и ``--postinst`` в ``cartridge pack``."

msgid ""
"Provide absolute paths to executables in the pre- and post-install scripts, "
"or use ``/bin/sh -c ''`` instead."
msgstr ""
"Укажите абсолютные пути к исполняемым файлам скриптов или используйте "
"``/bin/sh -c ''``."

msgid "Example pre-/post-install script"
msgstr "Пример скрипта"

msgid ""
"/bin/sh -c 'touch file-path'\n"
"/bin/sh -c 'mkdir dir-path'\n"
"# or\n"
"/bin/mkdir dir-path"
msgstr ""
"/bin/sh -c 'touch file-path'\n"
"/bin/sh -c 'mkdir dir-path'\n"
"# или\n"
"/bin/mkdir dir-path"

msgid "Customizing systemd unit files"
msgstr "Конфигурация юнит-файлов systemd"

msgid ""
"Use the flags ``--unit-template``, ``--instantiated-unit-template``, and "
"``--stateboard-unit-template`` to customize standard unit files."
msgstr ""
"Используйте параметры ``--unit-template``, ``--instantiated-unit-template`` "
"и ``--stateboard-unit-template``, чтобы сделать юнит-файлы приложения "
"отличными от стандартных."

msgid ""
"One reason to customize standard unit files is if you want to deploy your "
"RPM/DEB package on a platform different from the one where you've built it. "
"In this case, ``ExecStartPre`` may contain an incorrect path to `mkdir`. As "
"a hotfix, we suggest editing the unit files."
msgstr ""
"Одной из причин для модификации стандартных юнит-файлов может быть "
"необходимость развертывания вашего RPM/DEB-пакета на платформе, отличной от "
"той, на которой вы его собирали. В этом случае ``ExecStartPre`` может "
"содержать неверный путь к `mkdir`. В качестве легкого решения мы предлагаем "
"редактирование юнит-файлов."

msgid ""
"The unit files can contain `text templates "
"<https://golang.org/pkg/text/template/>`__."
msgstr ""
"Юнит-файлы могут содержать `текстовые шаблоны "
"<https://golang.org/pkg/text/template/>`__."

msgid "Example"
msgstr "Пример"

msgid "This is an instantiated unit file."
msgstr "Это юнит-файл, позволяющий запускать экземпляры приложения."

msgid ""
"[Unit]\n"
"Description=Tarantool Cartridge app {{ .Name }}@%i\n"
"After=network.target\n"
"\n"
"[Service]\n"
"Type=simple\n"
"ExecStartPre=/bin/sh -c 'mkdir -p {{ .InstanceWorkDir }}'\n"
"ExecStart={{ .Tarantool }} {{ .AppEntrypointPath }}\n"
"Restart=on-failure\n"
"RestartSec=2\n"
"User=tarantool\n"
"Group=tarantool\n"
"\n"
"Environment=TARANTOOL_APP_NAME={{ .Name }}\n"
"Environment=TARANTOOL_WORKDIR={{ .InstanceWorkDir }}\n"
"Environment=TARANTOOL_CFG={{ .ConfPath }}\n"
"Environment=TARANTOOL_PID_FILE={{ .InstancePidFile }}\n"
"Environment=TARANTOOL_CONSOLE_SOCK={{ .InstanceConsoleSock }}\n"
"Environment=TARANTOOL_INSTANCE_NAME=%i\n"
"\n"
"LimitCORE=infinity\n"
"# Disable OOM killer\n"
"OOMScoreAdjust=-1000\n"
"# Increase fd limit for Vinyl\n"
"LimitNOFILE=65535\n"
"\n"
"# Systemd waits until all xlogs are recovered\n"
"TimeoutStartSec=86400s\n"
"# Give a reasonable amount of time to close xlogs\n"
"TimeoutStopSec=10s\n"
"\n"
"[Install]\n"
"WantedBy=multi-user.target\n"
"Alias={{ .Name }}.%i"
msgstr ""
"[Unit]\n"
"Description=Tarantool Cartridge app {{ .Name }}@%i\n"
"After=network.target\n"
"\n"
"[Service]\n"
"Type=simple\n"
"ExecStartPre=/bin/sh -c 'mkdir -p {{ .InstanceWorkDir }}'\n"
"ExecStart={{ .Tarantool }} {{ .AppEntrypointPath }}\n"
"Restart=on-failure\n"
"RestartSec=2\n"
"User=tarantool\n"
"Group=tarantool\n"
"\n"
"Environment=TARANTOOL_APP_NAME={{ .Name }}\n"
"Environment=TARANTOOL_WORKDIR={{ .InstanceWorkDir }}\n"
"Environment=TARANTOOL_CFG={{ .ConfPath }}\n"
"Environment=TARANTOOL_PID_FILE={{ .InstancePidFile }}\n"
"Environment=TARANTOOL_CONSOLE_SOCK={{ .InstanceConsoleSock }}\n"
"Environment=TARANTOOL_INSTANCE_NAME=%i\n"
"\n"
"LimitCORE=infinity\n"
"# Отключение OOM killer\n"
"OOMScoreAdjust=-1000\n"
"# Увеличение лимита fd для Vinyl\n"
"LimitNOFILE=65535\n"
"\n"
"# Systemd ожидает, пока все логи xlog не будут восстановлены\n"
"TimeoutStartSec=86400s\n"
"# Ожидание, пока не закроются логи xlog\n"
"TimeoutStopSec=10s\n"
"\n"
"[Install]\n"
"WantedBy=multi-user.target\n"
"Alias={{ .Name }}.%i"

msgid "Supported variables"
msgstr "Поддерживаемые переменные"

msgid "``Name``"
msgstr "``Name``"

msgid "Application name."
msgstr "Имя приложения."

msgid "``StateboardName``"
msgstr "``StateboardName``"

msgid "Application stateboard name (``<app-name>-stateboard``)."
msgstr ""
"Имя stateboard-экземпляра приложения (``<имя_приложения>-stateboard``)."

msgid "``DefaultWorkDir``"
msgstr "``DefaultWorkDir``"

msgid ""
"Default instance working directory (``/var/lib/tarantool/<app-"
"name>.default``)."
msgstr ""
"Рабочая директория экземпляра, заданная по умолчанию "
"(``/var/lib/tarantool/<имя_приложения>.default``)."

msgid "``InstanceWorkDir``"
msgstr "``InstanceWorkDir``"

msgid ""
"Application instance working directory (``/var/lib/tarantool/<app-"
"name>.<instance-name>``)."
msgstr ""
"Рабочая директория приложения, заданная по умолчанию "
"(``/var/lib/tarantool/<имя_приложения>.<instance-name>``)."

msgid "``StateboardWorkDir``"
msgstr "``StateboardWorkDir``"

msgid ""
"Stateboard working directory (``/var/lib/tarantool/<app-name>-stateboard``)."
msgstr ""
"Рабочая директория stateboard-экземпляра "
"(``/var/lib/tarantool/<имя_приложения>-stateboard``)."

msgid "``DefaultPidFile``"
msgstr "``DefaultPidFile``"

msgid ""
"Default instance PID file (``/var/run/tarantool/<app-name>.default.pid``)."
msgstr ""
"PID-файл экземпляра, заданный по умолчанию "
"(``/var/run/tarantool/<имя_приложения>.default.pid``)."

msgid "``InstancePidFile``"
msgstr "``InstancePidFile``"

msgid ""
"Application instance PID file (``/var/run/tarantool/<app-name>.<instance-"
"name>.pid``)."
msgstr ""
"PID-файл экземпляра приложения "
"(``/var/run/tarantool/<имя_приложения>.<имя_экземпляра>.pid``)."

msgid "``StateboardPidFile``"
msgstr "``StateboardPidFile``"

msgid ""
"Stateboard PID file (``/var/run/tarantool/<app-name>-stateboard.pid``)."
msgstr ""
"PID-файл stateboard-экземпляра "
"(``/var/run/tarantool/<имя_приложения>-stateboard.pid``)."

msgid "``DefaultConsoleSock``"
msgstr "``DefaultConsoleSock``"

msgid ""
"Default instance console socket (``/var/run/tarantool/<app-"
"name>.default.control``)."
msgstr ""
"Сокет консоли экземпляра, заданный по умолчанию "
"(``/var/run/tarantool/<имя_приложения>.default.control``)."

msgid "``InstanceConsoleSock``"
msgstr "``InstanceConsoleSock``"

msgid ""
"Application instance console socket (``/var/run/tarantool/<app-"
"name>.<instance-name>.control``)."
msgstr ""
"Сокет консоли экземпляра приложения "
"(``/var/run/tarantool/<имя_приложения>.<имя_экземпляра>.control``)."

msgid "``StateboardConsoleSock``"
msgstr "``StateboardConsoleSock``"

msgid ""
"Stateboard console socket (``/var/run/tarantool/<app-"
"name>-stateboard.control``)."
msgstr ""
"Сокет консоли stateboard-экземпляра "
"(``/var/run/tarantool/<имя_приложения>-stateboard.control``)."

msgid "``ConfPath``"
msgstr "``ConfPath``"

msgid "Path to the application instances config (``/etc/tarantool/conf.d``)."
msgstr ""
"Путь к конфигурации экземпляров приложения (``/etc/tarantool/conf.d``)."

msgid "``AppEntrypointPath``"
msgstr "``AppEntrypointPath``"

msgid ""
"Path to the application entrypoint (``/usr/share/tarantool/<app-"
"name>/init.lua``)."
msgstr ""
"Путь к точке входа приложения "
"(``/usr/share/tarantool/<имя_приложения>/init.lua``)."

msgid "``StateboardEntrypointPath``"
msgstr "``StateboardEntrypointPath``"

msgid ""
"Path to the stateboard entrypoint (``/usr/share/tarantool/<app-"
"name>/stateboard.init.lua``)."
msgstr ""
"Путь к точке входа stateboard-экземпляра "
"(``/usr/share/tarantool/<имя_приложения>/stateboard.init.lua``)."

msgid "Passing parameters to unit files"
msgstr "Передача параметров юнит-файлам"

msgid ""
"You can pass certain parameters to your application's unit files using a "
"special file. By default, it is ``systemd-unit-params.yml``, located in the "
"project directory. To use a different file, specify its name with the "
"``--unit-params-file`` flag."
msgstr ""
"Вы можете передать некоторые параметры в юнит-файл приложения, используя "
"специальный файл настроек --- по умолчанию это ``systemd-unit-params.yml`` в"
" директории проекта. Чтобы использовать другой файл, укажите его имя с "
"помощью параметра ``--unit-params-file`` команды ``cartridge pack rpm|deb``."

msgid ""
"For example, the ``fd-limit`` option lets you limit the number of file "
"descriptors determined by the ``LimitNOFILE`` parameter in the ``systemd`` "
"unit file and instantiated unit file. Another example would be ``stateboard-"
"fd-limit``, which lets you set the file descriptor limit in the stateboard "
"``systemd`` unit file."
msgstr ""
"Например, ``fd-limit`` позволяет ограничить количество файловых "
"дескрипторов, определяемое параметром ``LimitNOFILE`` юнит-файла. Еще один "
"пример параметра, который можно указать в файле ``systemd-unit-params.yml`` "
"--- это ``stateboard-fd-limit``. С его помощью можно установить лимит "
"файловых дескрипторов в юнит-файле для ``systemd``, позволяющем запускать "
"stateboard."

msgid ""
"You can also pass parameters by env with the systemd unit file. To do so, "
"specify the instance and stateboard arguments in the unit parameters file. "
"The parameter will convert to ``Environment=TARANTOOL_<PARAM>: <value>`` in "
"the unit file. Note that these variables have higher priority than the "
"variables in the instance configuration file (``--cfg``)."
msgstr ""
"Вы также можете передать параметры юнит-файлу для ``systemd`` с помощью "
"переменных окружения. Для этого укажите аргументы для экземпляра приложения "
"и stateboard-экземпляра в конфигурации юнит-файла. Переданный параметр будет"
" преобразован в строку ``Environment=TARANTOOL_<параметр>: <значение>`` в "
"юнит-файле. Обратите внимание, что у этих переменных приоритет будет выше, "
"чем у переменных, заданных в файле конфигурации экземпляра (``--cfg``)."

msgid "Supported parameters"
msgstr "Поддерживаемые параметры"

msgid "``fd-limit``"
msgstr "``fd-limit``"

msgid "``LimitNOFILE`` for an application instance"
msgstr "``LimitNOFILE`` для экземпляра приложения"

msgid "``stateboard-fd-limit``"
msgstr "``stateboard-fd-limit``"

msgid "``LimitNOFILE`` for a stateboard instance"
msgstr "``LimitNOFILE`` для экземпляра stateboard"

msgid "``instance-env``"
msgstr "``instance-env``"

msgid ""
":doc:`cartridge.argparse "
"</book/cartridge/cartridge_api/modules/cartridge.argparse>` environment "
"variables (like ``net-msg-max``) for an application instance"
msgstr ""
"Переменные окружения :doc:`cartridge.argparse "
"</book/cartridge/cartridge_api/modules/cartridge.argparse>` (например, "
"``net-msg-max``) для экземпляра приложения"

msgid "``stateboard-env``"
msgstr "``stateboard-env``"

msgid ""
":doc:`cartridge.argparse "
"</book/cartridge/cartridge_api/modules/cartridge.argparse>` environment "
"variables (like ``net-msg-max``) for a stateboard instance"
msgstr ""
"Переменные окружения :doc:`cartridge.argparse "
"</book/cartridge/cartridge_api/modules/cartridge.argparse>` (например, "
"``net-msg-max``) для stateboard-экземпляра приложения"

msgid "``systemd-unit-params.yml``:"
msgstr "``systemd-unit-params.yml``:"

msgid ""
"fd-limit: 1024\n"
"stateboard-fd-limit: 2048\n"
"instance-env:\n"
"    app-name: 'my-app'\n"
"    net_msg_max: 1024\n"
"    pid_file: '/some/special/dir/my-app.%i.pid'\n"
"    my-param: 'something'\n"
"    # or\n"
"    # TARANTOOL_MY_PARAM: 'something'\n"
"stateboard-env:\n"
"    app-name: 'my-app-stateboard'\n"
"    pid_file: '/some/special/dir/my-app-stateboard.pid'"
msgstr ""
"fd-limit: 1024\n"
"stateboard-fd-limit: 2048\n"
"instance-env:\n"
"    app-name: 'my-app'\n"
"    net_msg_max: 1024\n"
"    pid_file: '/some/special/dir/my-app.%i.pid'\n"
"    my-param: 'something'\n"
"    # или\n"
"    # TARANTOOL_MY_PARAM: 'something'\n"
"stateboard-env:\n"
"    app-name: 'my-app-stateboard'\n"
"    pid_file: '/some/special/dir/my-app-stateboard.pid'"

msgid ""
"Some ``systemd`` unit parameters can be listed in the ``systemd-unit-"
"params.yml`` file in the project directory. You can also use a file with a "
"different name, specifying it in the ``--unit-params-file`` option."
msgstr ""
"Некоторые параметры юнит-файла для ``systemd`` могут быть указаны в файле "
"``systemd-unit-params.yml`` в директории проекта. Чтобы использовать другой "
"файл, укажите его имя с помощью параметра ``--unit-params-file``."

msgid "Installation"
msgstr "Установка"

msgid ""
"If you are using open-source Tarantool, your application package has "
"Tarantool as a dependency. In this case, before installing your RPM/DEB "
"package, you have to enable the Tarantool repo to allow your package manager"
" to install this dependency correctly:"
msgstr ""
"Если вы используете для разработки версию Tarantool с открытым исходным "
"кодом, Tarantool  будет среди зависимостей пакета. В этом случае перед "
"установкой собранного RPM-/DEB-пакета необходимо подключить репозиторий "
"Tarantool и разрешить менеджеру пакетов установить эту зависимость:"

msgid ""
"curl -L https://tarantool.io/installer.sh | VER=${TARANTOOL_VERSION} bash"
msgstr ""
"curl -L https://tarantool.io/installer.sh | VER=${TARANTOOL_VERSION} bash"

msgid "After this, you can install the application package."
msgstr "После этого можно устанавливать пакет приложения."

msgid "Starting application instances"
msgstr "Запуск экземпляров приложения"

msgid ""
"After you've installed the package, configure the instances you want to "
"start."
msgstr ""
"После установки пакета настройте экземпляры, которые хотите запустить."

msgid ""
"For example, if your application name is ``myapp`` and you want to start two"
" instances, you might put the following ``myapp.yml`` file in the "
"``/etc/tarantool/conf.d`` directory:"
msgstr ""
"Вот как может выглядеть файл настроек ``myapp.yml``, расположенный в "
"директории ``/etc/tarantool/conf.d`` и позволяющий запустить два экземпляра "
"приложения ``myapp``:"

msgid ""
"myapp:\n"
"  cluster_cookie: secret-cookie\n"
"\n"
"myapp.instance-1:\n"
"  http_port: 8081\n"
"  advertise_uri: localhost:3301\n"
"\n"
"myapp.instance-2:\n"
"  http_port: 8082\n"
"  advertise_uri: localhost:3302"
msgstr ""
"myapp:\n"
"  cluster_cookie: secret-cookie\n"
"\n"
"myapp.instance-1:\n"
"  http_port: 8081\n"
"  advertise_uri: localhost:3301\n"
"\n"
"myapp.instance-2:\n"
"  http_port: 8082\n"
"  advertise_uri: localhost:3302"

msgid ""
"Learn more about :ref:`configuring Cartridge application instances "
"<cartridge-config-basic>`."
msgstr ""
"Узнайте больше о :ref:`настройке экземпляров приложений на Cartridge "
"<cartridge-config-basic>`."

msgid "Now start the instances you've configured:"
msgstr "Теперь запустите настроенные экземпляры:"

msgid ""
"systemctl start myapp@instance-1\n"
"systemctl start myapp@instance-2"
msgstr ""
"systemctl start myapp@instance-1\n"
"systemctl start myapp@instance-2"

msgid ""
"If you use stateful failover, start the application stateboard as well. Make"
" sure that your application has ``stateboard.init.lua`` in its root "
"directory."
msgstr ""
"Если восстановление после cбоев у вас работает в режиме ``stateful``, "
"запустите также stateboard-экземпляр приложения. Убедитесь, что в корневой "
"директории приложения есть файл ``stateboard.init.lua``."

msgid ""
"Add the ``myapp-stateboard`` section to ``/etc/tarantool/conf.d/myapp.yml``:"
msgstr ""
"Добавьте в конфигурацию ``/etc/tarantool/conf.d/myapp.yml`` раздел ``myapp-"
"stateboard``:"

msgid ""
"myapp-stateboard:\n"
"  listen: localhost:3310\n"
"  password: passwd"
msgstr ""
"myapp-stateboard:\n"
"  listen: localhost:3310\n"
"  password: passwd"

msgid "Then start the stateboard service:"
msgstr "Затем запустите сервис stateboard:"

msgid "systemctl start myapp-stateboard"
msgstr "systemctl start myapp-stateboard"
